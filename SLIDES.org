#+TITLE: Slim your Docker images in less than a handful of steps

* Today you will learn...
- A few easy steps you can take to make your Docker images smaller and faster.
- ...plus a few more tips to take home!
* $ whoami
- James Liu
  - Email: james@liu.lol
- Senior Software Engineer, Static Analysis @ GitLab
  - SAST, Secret Detection, IaC, Code Quality
  - Most of what my team works on is open source!
  - Just Google "Static Analysis Group GitLab" if you want to learn more.
- My background is in developer tooling and backend web development
  - Mostly Go and Ruby these days
* Demo
** Example app
#+begin_src sh
./main ~/repos/linux-stable | less
#+end_src
** Naive Dockerfile
#+name: dockerfile_naive
#+begin_src dockerfile
FROM ubuntu:22.04

WORKDIR /app

COPY . .

RUN apt update
RUN apt upgrade -y
RUN apt install -y ca-certificates
RUN apt install -y libgit2-dev
RUN apt install -y golang

RUN go build main.go

RUN apt remove -y ca-certificates
RUN apt remove -y golang

ENTRYPOINT ["./main", "/repo"]
#+end_src

** What's in a Docker image?
- A Linux root filesystem
- ...overlaid with _your stuff_
- You can explore them with [[https://github.com/wagoodman/dive][Dive]]!
*** Dive
#+begin_src sh
docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock wagoodman/dive:latest demo:1-naive
#+end_src

** A _lot_ faster and a little smaller
#+name: dockerfile_packagemanager
#+begin_src dockerfile
FROM ubuntu:22.04

WORKDIR /app

RUN apt update && \
    apt upgrade -y && \
    apt install -y ca-certificates libgit2-dev golang && \
    rm -rf /var/lib/apt/lists/*

COPY go.mod go.sum .
RUN go mod download

COPY . .

RUN go build main.go

ENTRYPOINT ["./main", "/repo"]
#+end_src

*** Dive
#+begin_src sh
docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock wagoodman/dive:latest demo:4-packagemanager
#+end_src
*** Diff
#+begin_src sh :noweb yes :exports results :results verbatim :wrap src diff

cat <<EOF >/tmp/Dockerfile.prev
<<dockerfile_naive>>
EOF

cat <<EOF >/tmp/Dockerfile.new
<<dockerfile_packagemanager>>
EOF

diff -u /tmp/Dockerfile.prev /tmp/Dockerfile.new
rm -f /tmp/Dockerfile.prev /tmp/Dockerfile.new
#+end_src

** A _lot_ faster and a _lot_ smaller
#+name: dockerfile_multistage
#+begin_src dockerfile
FROM ubuntu:22.04 AS builder

WORKDIR /app

RUN apt update && \
    apt upgrade -y && \
    apt install -y ca-certificates libgit2-dev golang && \
    rm -rf /var/lib/apt/lists/*

COPY go.mod go.sum .
RUN go mod download

COPY . .

RUN go build main.go


FROM ubuntu:22.04

WORKDIR /app

RUN apt update && \
    apt upgrade -y && \
    apt install -y libgit2-1.1 && \
    rm -rf /var/lib/apt/lists/*

COPY --from=builder /app/main .

ENTRYPOINT ["./main", "/repo"]
#+end_src

*** Diff
#+begin_src sh :noweb yes :exports results :results verbatim :wrap src diff

cat <<EOF >/tmp/Dockerfile.prev
<<dockerfile_packagemanager>>
EOF

cat <<EOF >/tmp/Dockerfile.new
<<dockerfile_multistage>>
EOF

diff -u /tmp/Dockerfile.prev /tmp/Dockerfile.new
rm -f /tmp/Dockerfile.prev /tmp/Dockerfile.new
#+end_src

*** Dive
#+begin_src sh
docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock wagoodman/dive:latest demo:5-multistage
#+end_src

* More things you can try!
** =.dockerignore=
- Exclude project files that don't need to be shipped.
- Tests, development assets etc.
** Alpine Linux
- Lightweight Linux distribution built around musl libc and busybox.
- ~5MB compressed base image.
- Some oddities with applications that require glibc, but generally good compatibility.
** Distroless images
- No shell, package managers, or utilities.
- ~2MB compressed base image.
